// Generated by CoffeeScript 1.7.1
(function() {
  var $, makeGoogleChart;

  $ = jQuery;

  makeGoogleChart = function(chartType, extraOptions) {
    return function(pivotData, opts) {
      var agg, colKey, colKeys, dataArray, dataTable, defaults, groupByTitle, h, hAxisTitle, headers, k, numCharsInHAxis, options, result, row, rowKey, rowKeys, title, v, vAxisTitle, wrapper, _i, _j, _len, _len1;
      defaults = {
        localeStrings: {
          vs: "vs",
          by: "by"
        }
      };
      opts = $.extend(defaults, opts);
      rowKeys = pivotData.getRowKeys();
      if (rowKeys.length === 0) {
        rowKeys.push([]);
      }
      colKeys = pivotData.getColKeys();
      if (colKeys.length === 0) {
        colKeys.push([]);
      }
      headers = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = rowKeys.length; _i < _len; _i++) {
          h = rowKeys[_i];
          _results.push(h.join("-"));
        }
        return _results;
      })();
      headers.unshift("");
      numCharsInHAxis = 0;
      dataArray = [headers];
      for (_i = 0, _len = colKeys.length; _i < _len; _i++) {
        colKey = colKeys[_i];
        row = [colKey.join("-")];
        numCharsInHAxis += row[0].length;
        for (_j = 0, _len1 = rowKeys.length; _j < _len1; _j++) {
          rowKey = rowKeys[_j];
          agg = pivotData.getAggregator(rowKey, colKey);
          if (agg.value() != null) {
            row.push(agg.value());
          } else {
            row.push(null);
          }
        }
        dataArray.push(row);
      }
      title = vAxisTitle = pivotData.aggregatorName + (pivotData.valAttrs.length ? "(" + (pivotData.valAttrs.join(", ")) + ")" : "");
      hAxisTitle = pivotData.colAttrs.join("-");
      if (hAxisTitle !== "") {
        title += " " + opts.localeStrings.vs + " " + hAxisTitle;
      }
      groupByTitle = pivotData.rowAttrs.join("-");
      if (groupByTitle !== "") {
        title += " " + opts.localeStrings.by + " " + groupByTitle;
      }
      options = {
        width: $(window).width() / 1.4,
        height: $(window).height() / 1.4,
        title: title,
        hAxis: {
          title: hAxisTitle,
          slantedText: numCharsInHAxis > 50
        },
        vAxis: {
          title: vAxisTitle
        }
      };
      if (dataArray[0].length === 2 && dataArray[0][1] === "") {
        options.legend = {
          position: "none"
        };
      }
      for (k in extraOptions) {
        v = extraOptions[k];
        options[k] = v;
      }



      // dataTable = google.visualization.arrayToDataTable(dataArray);
      // result = $("<div style='width: 100%; height: 100%;'>");
      // wrapper = new google.visualization.ChartWrapper({
      //   dataTable: dataTable,
      //   chartType: chartType,
      //   options: options
      // });
      // wrapper.draw(result[0]);
      // result.bind("dblclick", function() {
      //   var editor;
      //   editor = new google.visualization.ChartEditor();
      //   google.visualization.events.addListener(editor, 'ok', function() {
      //     return editor.getChartWrapper().draw(result[0]);
      //   });
      //   return editor.openDialog(wrapper);
      // });
      // return result;





      if (chartType == "pie") {
        //var chartContainerDiv = $("<div id='container'>");
        //$('.pvtRendererArea').append(chartContainerDiv);
        //var chartContainer = document.getElementById('container');
        // var emptyElement = $("<span>&nbsp;</span>");
        // $('.pvtRendererArea').append(emptyElement);
        result = $("<div class='resultClass'>");
        var metaData = new Array();
        metaData[0] = title;
        metaData[1] = groupByTitle;
        metaData[2] = vAxisTitle;

        for(var idx=1; idx < dataArray.length; idx++) {
          var chartContainerDiv = $("<div id='container"+idx+"' style='border:1px solid #ddd'>");
          $('.pvtRendererArea').append(chartContainerDiv);
          var chartContainer = document.getElementById('container'+idx);
          var emptyElement = $("<span>&nbsp;</span>");
          $('.pvtRendererArea').append(emptyElement);

          var chartArray = [];
          chartArray.push(dataArray[0]);
          chartArray.push(dataArray[idx]);
          var chartResults = getChart(chartType, chartArray, metaData, 'container'+idx);
          var chart = new Highcharts.Chart(chartResults);
          emptyElement.append(chartContainer);
          result.append(emptyElement);
        }
      } else {
        var chartContainerDiv = $("<div id='container'>");
        $('.pvtRendererArea').append(chartContainerDiv);
        var chartContainer = document.getElementById('container');
        var emptyElement = $("<span>&nbsp;</span>");
        $('.pvtRendererArea').append(emptyElement);
        result = $("<div class='resultClass'>");
        var metaData = new Array();
        metaData[0] = title;
        metaData[1] = groupByTitle;
        metaData[2] = vAxisTitle;

        var chartResults = getChart(chartType, dataArray, metaData);
        var chart = new Highcharts.Chart(chartResults);
        emptyElement.append(chartContainer);
        result.append(emptyElement);
      }



      // credits: {
      //     enabled: false
      // },

      return result;

    };
  };

  // $.pivotUtilities.gchart_renderers = {
  //   "Line Chart": makeGoogleChart("LineChart"),
  //   "Bar Chart": makeGoogleChart("ColumnChart"),
  //   "Stacked Bar Chart": makeGoogleChart("ColumnChart", {
  //     isStacked: true
  //   }),
  //   "Area Chart": makeGoogleChart("AreaChart", {
  //     isStacked: true
  //   })
  // };

  $.pivotUtilities.gchart_renderers = {
    "Column Chart": makeGoogleChart("column"),
    "Stacked Column Chart": makeGoogleChart("stackedcolumn"),
    "Bar Chart": makeGoogleChart("bar"),
    "Line Chart": makeGoogleChart("line"),
    "Area Chart": makeGoogleChart("area", {
      isStacked: true
    }),
    "Pie Chart": makeGoogleChart("pie"),
    //"Pie chart" : makePieChart('pie'),
    // "Bubble Chart" : makeGoogleChart("bubbles"),
    "Scatter Plot": makeGoogleChart("scatter")
  };


}).call(this);


function getChart(chartType, dataArray, metaData, containerId) {
  console.log("getChart ..............");
  switch (chartType) {
    case "bar":
      return getBarChart(dataArray, metaData);
      break;

    case "column":
      return getColumnChart(dataArray, metaData);
      break;

    case "stackedcolumn":
      return getStackedColumnChart(dataArray, metaData);
      break;

    case "line":
      return getLineChart(dataArray, metaData);
      break;

    case "area":
      return getAreaChart(dataArray, metaData);
      break;

    case "pie":

      return getPieChart(dataArray, metaData, containerId);
      break;

    case "scatter":
      return getScatterPlot(dataArray, metaData);
      break;

    case "bubbles":
      return getBubbleChart(dataArray, metaData);
      break;

    case "time":
      return getTimeSeries(dataArray, metaData);
      break;

    case "box":
      return getBoxPlot(dataArray, metaData);
      break;
  }

}

function getBarChart(dataArray, metaData) {
  var chartTitle = metaData[0];
  var xAxisTitle = metaData[1];
  var yAxisTitle = metaData[2];

  var myOptions = {
    credits: {
      enabled: false
    },
    chart: {
      renderTo: 'container',
      type: 'bar',
      plotBackgroundColor: null,
      plotBorderWidth: null,
      plotShadow: false
    },
    colors: Highcharts.map(Highcharts.getOptions().colors, function(color) {
      return {
        radialGradient: {
          cx: 0.5,
          cy: 0.3,
          r: 0.7
        },
        stops: [
          [0, color],
          [1, Highcharts.Color(color).brighten(-0.3).get('rgb')] // darken
        ]
      };
    }),
    title: {
      text: chartTitle
    },
    xAxis: {
      title: {
        text: xAxisTitle
      },
      categories: [],
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    yAxis: {
      title: {
        text: yAxisTitle
      },
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    tooltip: {
      formatter: function() {
        return '<b>' + this.x + '</b><br/>' +
          '<b>' + this.series.name + ':</b> ' + Highcharts.numberFormat(this.point.y, 0, '.');
      }
    },
    plotOptions: {
      bar: {
        dataLabels: {
          enabled: true,
          formatter: function() {
            return Highcharts.numberFormat(this.point.y, 0, '.');
          }
        }
      },
      series: {
        shadow: true
      }
    },

    series: []
  };

  var headers = new Array();

  headers = dataArray[0];

  for (var i = 1; i < headers.length; i++) {
    myOptions.xAxis.categories.push(headers[i]);
  }

  for (var i = 1; i < dataArray.length; i++) {
    var currentArray = new Array();
    currentArray = dataArray[i];
    var categoryName = currentArray[0];
    var categoryData = new Array();
    //console.log("CategoryName: " + categoryName + " for data: " + dataArray[i]);
    for (var j = 1; j < currentArray.length; j++) {
      categoryData.push(currentArray[j]);
      //console.log("Category Data: " + currentArray[j]);
    }

    myOptions.series.push({
      'name': categoryName,
      'data': categoryData
    });
  }

  //console.log("Bar Chart Options: " + JSON.stringify(myOptions));

  return myOptions;
}


function getBoxPlot(dataArray, metaData) {
  var chartTitle = metaData[0];
  var xAxisTitle = metaData[1];
  var yAxisTitle = metaData[2];

  var myOptions = {
    credits: {
      enabled: false
    },
    chart: {
      renderTo: 'container',
      type: 'boxplot'
    },
    title: {
      text: chartTitle
    },
    xAxis: {
      categories: [],
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    yAxis: {
      title: {
        text: yAxisTitle
      },
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      },
      plotLines: [{
        //value: 932,
        color: 'red',
        width: 1,
        label: {
          //text: 'Theoretical mean: 932',
          align: 'center',
          style: {
            color: 'gray'
          }
        }
      }]
    },
    series: []
  };

  var headers = new Array();

  headers = dataArray[0];

  for (var i = 1; i < headers.length; i++) {
    myOptions.xAxis.categories.push(headers[i]);
  }

  for (var i = 1; i < dataArray.length; i++) {
    var currentArray = new Array();
    currentArray = dataArray[i];
    var categoryName = currentArray[0];
    var categoryData = new Array();
    //console.log("CategoryName: " + categoryName + " for data: " + dataArray[i]);
    for (var j = 1; j < currentArray.length; j++) {
      categoryData.push(currentArray[j]);
      //console.log("Category Data: " + currentArray[j]);
    }

    myOptions.series.push({
      'data': categoryData
    });
  }

  //console.log("Box Plot Chart Options: " + JSON.stringify(myOptions));

  return myOptions;
}

function getColumnChart(dataArray, metaData) {
  var chartTitle = metaData[0];
  var xAxisTitle = metaData[1];
  var yAxisTitle = metaData[2];

  var myOptions = {
    credits: {
      enabled: false
    },
    chart: {
      renderTo: 'container',
      type: 'column',
      plotBackgroundColor: null,
      plotBorderWidth: null,
      plotShadow: false
    },
    colors: Highcharts.map(Highcharts.getOptions().colors, function(color) {
      return {
        radialGradient: {
          cx: 0.5,
          cy: 0.3,
          r: 0.7
        },
        stops: [
          [0, color],
          [1, Highcharts.Color(color).brighten(-0.3).get('rgb')] // darken
        ]
      };
    }),
    title: {
      text: chartTitle
    },
    xAxis: {
      title: {
        text: xAxisTitle
      },
      categories: [],
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    yAxis: {
      title: {
        text: yAxisTitle
      },
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    tooltip: {
      formatter: function() {
        return '<b>' + this.x + '</b><br/>' +
          '<b>' + this.series.name + ':</b> ' + Highcharts.numberFormat(this.point.y, 0, '.');
      }
    },
    plotOptions: {
      column: {
        dataLabels: {
          enabled: true,
          formatter: function() {
            return Highcharts.numberFormat(this.point.y, 0, '.');
          }
        }
      },
      series: {
        shadow: true
      }
    },
    series: []
  };

  var headers = new Array();

  headers = dataArray[0];

  //console.log("GetCharts: dataArray.length: " + dataArray.length);

  for (var i = 1; i < headers.length; i++) {
    myOptions.xAxis.categories.push(headers[i]);
  }

  for (var i = 1; i < dataArray.length; i++) {
    var currentArray = new Array();
    currentArray = dataArray[i];
    var categoryName = currentArray[0];
    var categoryData = new Array();
    //console.log("CategoryName: " + categoryName + " for data: " + dataArray[i]);
    for (var j = 1; j < currentArray.length; j++) {
      categoryData.push(currentArray[j]);
      //console.log("Category Data: " + currentArray[j]);
    }

    myOptions.series.push({
      'name': categoryName,
      'data': categoryData
    });
  }

  //console.log("Bar Chart Options: " + JSON.stringify(myOptions));

  return myOptions;
}

function getStackedColumnChart(dataArray, metaData) {
  //console.log("Stacked Column Chart");
  var chartTitle = metaData[0];
  var xAxisTitle = metaData[1];
  var yAxisTitle = metaData[2];


  var myOptions = {
    credits: {
      enabled: false
    },
    chart: {
      renderTo: 'container',
      type: 'column',
      plotBackgroundColor: null,
      plotBorderWidth: null,
      plotShadow: false
    },
    // colors: Highcharts.map(Highcharts.getOptions().colors),
    title: {
      text: chartTitle
    },
    xAxis: {
      title: {
        text: xAxisTitle
      },
      categories: [],
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    yAxis: {
      title: {
        text: yAxisTitle
      },
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 7) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    tooltip: {
      formatter: function() {
        return '<b>' + this.x + '</b><br/>' +
          '<b>' + this.series.name + ':</b> ' + Highcharts.numberFormat(this.point.y, 0, '.');
      }
    },
    plotOptions: {
      column: {
        stacking: 'normal',
        dataLabels: {
          style: {
              textShadow: 'none'
          },
          enabled: true,
          color: 'white', //white
          formatter: function() {
            return Highcharts.numberFormat(this.point.y, 0, '.');
          }
        }
      },
      series: {
        shadow: true
      }
    },
    series: []
  };

  var headers = new Array();
  headers = dataArray[0];

  for (var i = 1; i < headers.length; i++) {
    myOptions.xAxis.categories.push(headers[i]);
  }

  for (var i = 1; i < dataArray.length; i++) {
    var currentArray = new Array();
    currentArray = dataArray[i];
    var categoryName = currentArray[0];
    var categoryData = new Array();
    for (var j = 1; j < currentArray.length; j++) {
      categoryData.push(currentArray[j]);
    }

    myOptions.series.push({
      'name': categoryName,
      'data': categoryData
    });
  }

  //console.log("Stacked Chart Options: " + JSON.stringify(myOptions));

  return myOptions;
}

function getLineChart(dataArray, metaData) {
  var chartTitle = metaData[0];
  var xAxisTitle = metaData[1];
  var yAxisTitle = metaData[2];

  var myOptions = {
    credits: {
      enabled: false
    },
    chart: {
      renderTo: 'container',
      plotBackgroundColor: null,
      plotBorderWidth: null,
      plotShadow: false
    },
    title: {
      text: chartTitle
    },
    colors: Highcharts.map(Highcharts.getOptions().colors, function(color) {
      return {
        radialGradient: {
          cx: 0.5,
          cy: 0.3,
          r: 0.7
        },
        stops: [
          [0, color],
          [1, Highcharts.Color(color).brighten(-0.3).get('rgb')] // darken
        ]
      };
    }),
    xAxis: {
      title: {
        text: xAxisTitle
      },
      categories: [],
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    yAxis: {
      title: {
        text: yAxisTitle
      },
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    tooltip: {
      formatter: function() {
        return '<b>' + this.x + '</b><br/>' +
          '<b>' + this.series.name + ':</b> ' + Highcharts.numberFormat(this.point.y, 0, '.');
      }
    },
    plotOptions: {
      line: {
        dataLabels: {
          enabled: true,
          formatter: function() {
            return Highcharts.numberFormat(this.point.y, 0, '.');
          }
        }
      },
      series: {
        shadow: true
      }
    },
    series: []
  };

  var headers = new Array();

  headers = dataArray[0];

  //console.log("GetCharts: dataArray.length: " + dataArray.length);

  // Set the height
  /*if (headers.length < 5 ) {
  	myOptions.chart.height = 360;
  } else if (headers.length > 5) {
  	myOptions.chart.height = 60 * headers.length;
  }
  */
  for (var i = 1; i < headers.length; i++) {
    myOptions.xAxis.categories.push(headers[i]);
  }

  for (var i = 1; i < dataArray.length; i++) {
    var currentArray = new Array();
    currentArray = dataArray[i];
    var categoryName = currentArray[0];
    var categoryData = new Array();
    //console.log("CategoryName: " + categoryName + " for data: " + dataArray[i]);
    for (var j = 1; j < currentArray.length; j++) {
      categoryData.push(currentArray[j]);
      //console.log("Category Data: " + currentArray[j]);
    }

    myOptions.series.push({
      'name': categoryName,
      'data': categoryData
    });
  }

  //console.log("Bar Chart Options: " + JSON.stringify(myOptions));

  return myOptions;
}

function getAreaChart(dataArray, metaData) {
  var chartTitle = metaData[0];
  var xAxisTitle = metaData[1];
  var yAxisTitle = metaData[2];

  var myOptions = {
    credits: {
      enabled: false
    },
    chart: {
      renderTo: 'container',
      type: 'area',
      plotBackgroundColor: null,
      plotBorderWidth: null,
      plotShadow: false
    },
    colors: Highcharts.map(Highcharts.getOptions().colors, function(color) {
      return {
        radialGradient: {
          cx: 0.5,
          cy: 0.3,
          r: 0.7
        },
        stops: [
          [0, color],
          [1, Highcharts.Color(color).brighten(-0.3).get('rgb')] // darken
        ]
      };
    }),
    title: {
      text: chartTitle
    },
    xAxis: {
      title: {
        text: xAxisTitle
      },
      categories: [],
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    yAxis: {
      title: {
        text: yAxisTitle
      },
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    tooltip: {
      formatter: function() {
        return '<b>' + this.x + '</b><br/>' +
          '<b>' + this.series.name + ':</b> ' + Highcharts.numberFormat(this.point.y, 0, '.');
      }
    },
    plotOptions: {
      area: {
        pointStart: 0,
        marker: {
          enabled: false,
          symbol: 'circle',
          radius: 2,
          states: {
            hover: {
              enabled: true
            }
          }
        }
      }
    },
    series: []
  };

  var headers = new Array();

  headers = dataArray[0];

  //console.log("GetCharts: dataArray.length: " + dataArray.length);

  // Set the height
  /*if (headers.length < 5 ) {
  	myOptions.chart.height = 360;
  } else if (headers.length > 5) {
  	myOptions.chart.height = 60 * headers.length;
  }
  */
  for (var i = 1; i < headers.length; i++) {
    myOptions.xAxis.categories.push(headers[i]);
  }

  for (var i = 1; i < dataArray.length; i++) {
    var currentArray = new Array();
    currentArray = dataArray[i];
    var categoryName = currentArray[0];
    var categoryData = new Array();
    for (var j = 1; j < currentArray.length; j++) {
      categoryData.push(currentArray[j]);
    }

    myOptions.series.push({
      'name': categoryName,
      'data': categoryData
    });
  }

  return myOptions;

}



function getPieChart(dataArray, metaData, containerId) {
  var chartTitle = metaData[0];
  var xAxisTitle = metaData[1];
  var yAxisTitle = metaData[2];


  // Radialize the colors
  /*Highcharts.getOptions().colors = Highcharts.map(Highcharts.getOptions().colors, function(color) {
      return {
          radialGradient: { cx: 0.5, cy: 0.3, r: 0.7 },
          stops: [
              [0, color],
              [1, Highcharts.Color(color).brighten(-0.3).get('rgb')] // darken
          ]
      };
  });*/

  var headers = new Array();
  headers = dataArray[0];
  var chartSeries = [];
  for (var i = 1; i < dataArray.length; i++) {
    var currentArray = new Array();
    currentArray = dataArray[i];
    var categoryName = currentArray[0];
    var categoryData = new Array();

    for (var j = 1; j < currentArray.length; j++) {
      var pieDataArray = new Array();
      pieDataArray.push(headers[j], currentArray[j]);
      categoryData.push(pieDataArray);
    }

    chartSeries.push({
      'name' : categoryName,
      'data': categoryData
    });

    // // 여러개의 Series일 경우, pie 차트가 겹쳐져 표현됨.
    // // 하나의 차트만 그려지도록 배열에 값이 없을때만 Series에 push 함.
    // if (myOptions.series.length == 0) {
    //   myOptions.series.push({
    //     'data': categoryData
    //   });
    //
    //   alert("주의 : 위 Series 항목중 첫번째 선택된 항목만 pie chart로 표시됩니다.");
    //
    // }


  }

  var myOptions = {
    credits: {
      enabled: false
    },
    chart: {
      renderTo: containerId,
      type: 'pie',
      plotBackgroundColor: null,
      plotBorderWidth: null,
      plotShadow: false
    },
    colors: Highcharts.map(Highcharts.getOptions().colors, function(color) {
      return {
        radialGradient: {
          cx: 0.5,
          cy: 0.3,
          r: 0.7
        },
        stops: [
          [0, color],
          [1, Highcharts.Color(color).brighten(-0.3).get('rgb')] // darken
        ]
      };
    }),
    title: {
      // text: "<tspan style='fill:blue'>" + chartSeries[0].name + "</tspan> - " + chartTitle
      text: chartSeries[0].name ? "<tspan style='font-weight: bold;'>" + chartSeries[0].name + "</tspan> - " + chartTitle : chartTitle
    },
    tooltip: {
      pointFormat: '{point.y:.0f}'
    },
    series: chartSeries,
    plotOptions: {
      pie: {
        allowPointSelect: true,
        cursor: 'pointer',
        dataLabels: {
          enabled: true,
          //color: '#000000',
          //connectorColor: '#000000',
          //format: '<b>{point.name}</b>: {point.percentage:.1f} %',
          formatter: function() {
            if (this.point.name.length > 10) {
              return '<b>' + this.point.name.substr(0, 10) + "...:</b> " + Highcharts.numberFormat(this.point.y, 0) + " (" +
                Highcharts.numberFormat(this.point.percentage, 1, '.') + '%)';
            } else {
              return '<b>' + this.point.name + ":</b> " + Highcharts.numberFormat(this.point.y, 0) + " (" +
                Highcharts.numberFormat(this.point.percentage, 1, '.') + '%)';
            }
          }
        }
      }
    }
  };


  console.log('options', myOptions)
  return myOptions;
}


function getScatterPlot(dataArray, metaData) {
  var chartTitle = metaData[0];
  var xAxisTitle = metaData[1];
  var yAxisTitle = metaData[2];

  var myOptions = {
    credits: {
      enabled: false
    },
    chart: {
      renderTo: 'container',
      type: 'scatter',
      zoomType: 'xy',
      plotBackgroundColor: null,
      plotBorderWidth: null,
      plotShadow: false
    },
    colors: Highcharts.map(Highcharts.getOptions().colors, function(color) {
      return {
        radialGradient: {
          cx: 0.5,
          cy: 0.3,
          r: 0.7
        },
        stops: [
          [0, color],
          [1, Highcharts.Color(color).brighten(-0.3).get('rgb')] // darken
        ]
      };
    }),
    title: {
      text: chartTitle
    },
    xAxis: {
      categories: [],
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      },
      startOnTick: true,
      endOnTick: true,
      showLastLabel: true
    },
    yAxis: {
      title: {
        text: yAxisTitle
      },
      labels: {
        formatter: function() {
          if (this.value.length > 10) {
            return this.value.substr(0, 5) + "...";
          } else {
            return this.value;
          }
        }
      }
    },
    plotOptions: {
      scatter: {
        marker: {
          radius: 5,
          states: {
            hover: {
              enabled: true,
              lineColor: 'rgb(100,100,100)'
            }
          }
        },
        states: {
          hover: {
            marker: {
              enabled: false
            }
          }
        },
        tooltip: {
          headerFormat: '<b>{series.name}</b><br/>',
          pointFormat: '{point.y:.2f}'
        }
      },
      series: {
        shadow: true
      }
    },

    series: []
  };

  var headers = new Array();

  headers = dataArray[0];


  for (var i = 1; i < headers.length; i++) {
    myOptions.xAxis.categories.push(headers[i]);
  }

  for (var i = 1; i < dataArray.length; i++) {
    var currentArray = new Array();
    currentArray = dataArray[i];
    var categoryName = currentArray[0];
    var categoryData = new Array();
    for (var j = 1; j < currentArray.length; j++) {
      categoryData.push(currentArray[j]);
    }

    myOptions.series.push({
      'name': categoryName,
      'data': categoryData
    });
  }

  return myOptions;
}

function getBubbleChart(dataArray, metaData) {
  var chartTitle = metaData[0];
  var xAxisTitle = metaData[1];
  var yAxisTitle = metaData[2];

  var myOptions = {
    credits: {
      enabled: false
    },
    chart: {
      renderTo: 'container',
      type: 'bubble',
      zoomType: 'xy',
      plotBackgroundColor: null,
      plotBorderWidth: null,
      plotShadow: false
    },
    colors: Highcharts.map(Highcharts.getOptions().colors, function(color) {
      return {
        radialGradient: {
          cx: 0.5,
          cy: 0.3,
          r: 0.7
        },
        stops: [
          [0, color],
          [1, Highcharts.Color(color).brighten(-0.3).get('rgb')] // darken
        ]
      };
    }),
    title: {
      text: chartTitle
    },

    plotOptions: {
      bubble: {
        tooltip: {
          pointFormat: '{point.y:.2f}'
        }
      }
    },

    series: []
  };

  var headers = new Array();

  headers = dataArray[0];


  for (var i = 1; i < dataArray.length; i++) {
    var currentArray = new Array();
    currentArray = dataArray[i];
    var categoryName = currentArray[0];
    var categoryData = new Array();
    //console.log("CategoryName: " + categoryName + " for data: " + dataArray[i]);
    for (var j = 1; j < currentArray.length; j++) {
      categoryData.push(currentArray[j]);
      //console.log("Category Data: " + currentArray[j]);
    }

    myOptions.series.push({
      'name': categoryName,
      'data': categoryData
    });
  }

  //console.log("Bubble Chart Options: " + JSON.stringify(myOptions));

  return myOptions;
}

/*function getTimeSeries(dataArray, metaData) {
	var chartTitle = metaData[0];
	var xAxisTitle = metaData[1];
	var yAxisTitle = metaData[2];

	var myOptions = {
		chart: {
			renderTo: 'container',
			zoomType: 'x'
		},
		title: {
			text: chartTitle
		},
		xAxis: {
			categories: [],
			labels:{
				formatter: function(){
					if (this.value.length > 10){
						return this.value.substr(0,5) + "...";
					}else{
						 return this.value;
					}
				}
			}
		},
		yAxis: {
			title: {
				text: yAxisTitle
			},
		},
		tooltip: {
                shared: true
        },
		plotOptions: {
			 area: {
                    fillColor: {
                        linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1},
                        stops: [
                            [0, Highcharts.getOptions().colors[0]],
                            [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
                        ]
                    },
                    lineWidth: 1,
                    marker: {
                        enabled: false
                    },
                    shadow: false,
                    states: {
                        hover: {
                            lineWidth: 1
                        }
                    },
                    threshold: null
                }
		},

		series:[{
			type: 'area',
			pointInterval: 24 * 3600 * 1000
		}]
	};

	var headers = new Array();

	headers = dataArray[0];
	for(var i = 1; i < headers.length; i++) {
		myOptions.xAxis.categories.push(headers[i]);
	}

	for(var i = 1; i < dataArray.length; i++) {
		var currentArray = new Array();
		currentArray = dataArray[i];
		var categoryName = currentArray[0];
		var categoryData = new Array();
		//console.log("CategoryName: " + categoryName + " for data: " + dataArray[i]);
		for(var j = 1; j < currentArray.length; j++) {
			categoryData.push(currentArray[j]);
			//console.log("Category Data: " + currentArray[j]);
		}

		myOptions.series.push({'data': categoryData});
	}

	//console.log("Bar Chart Options: " + JSON.stringify(myOptions));

	return myOptions;
}*/
